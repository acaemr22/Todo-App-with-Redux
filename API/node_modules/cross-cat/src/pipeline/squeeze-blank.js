"use strict";
/*
    File: src/pipeline/squeeze-blank-flag.ts
    cpuabuse.com
*/
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Suppress repeated empty output lines.
 */
/**
 * Literally an empty string.
 */
const emptyString = "";
/**
 * Literally a carriage return.
 */
const carriageReturn = "\r";
// Treat carriage return as empty
let treatCarriageReturnAsNotEmpty = false;
/**
 * Eliminates repeating blank lines.
 * @param text Text to process
 */
function processSqueezeBlank(text) {
    /**
     * Verifies if we consider the string empty.
     * @param textToCheck Text to check
     */
    function stringIsEmpty(textToCheck) {
        if (textToCheck === emptyString) {
            return true;
        }
        if (treatCarriageReturnAsNotEmpty && textToCheck === carriageReturn) {
            return true;
        }
        return false;
    }
    // Split by the blanks to an array
    let lines = text.split("\n");
    // Define first line; Array is never empty as it is made from string
    let firstLine = lines.shift();
    // Iterate through the lines
    return lines.reduce(function (aggregator, currentLine) {
        // Determine empty strings
        let currentLineIsEmpty = stringIsEmpty(currentLine);
        // Detect double blank lines
        if (currentLineIsEmpty && aggregator.previousLineIsEmpty) {
            return aggregator;
        }
        let result = {
            previousLineIsEmpty: currentLineIsEmpty,
            text: `${aggregator.text}\n${currentLine}`
        };
        // Return result
        return result;
    }, {
        previousLineIsEmpty: stringIsEmpty(firstLine),
        text: firstLine
    }).text;
}
exports.processSqueezeBlank = processSqueezeBlank;
//# sourceMappingURL=squeeze-blank.js.map